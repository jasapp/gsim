# gsim

# how to start this:
lein ring server-headless 3000
lein cljsbuild auto [dev|prod]
/usr/local/bin/cljs-repl 

Stuff to do next:
1. Put a big title bar at the top for navigating back to other pages
2. Put some kind of step forward, play, step backward, reset thing at the top of the text area
3. Finish the line drawing functions
4. Hook up evaluation stuff to codemirror 
5. Sending messages back to the server about errors
6. Sending file saves back to the server
8. Better ngc mode, and custom css for error words

Stuff to think about:
- Hover over commands, highlight result. Hover over lines, highlight commands. 
- Handle \r \r\n badness correctly. 
- Testing stuff. Soon. 
- Storing files
- User accounts
- Uploading new files
- Managing files
- Maybe using git?
- How do we want to evaluate the code -
 * On change?
 * On run (switching to read-only)?

Bigger ideas to think about:
- Cam software
- Awesome editor
- Objects, and actually simulating cuts
- language to gcode
- text / images / dxf / circuits to gcode
- storing files 

Codemirror specific stuff: 
- if you delete the current line, you lose the highlighter
- Tab completion?
- Show remaining possible arguments for existing commands 
- automatically calculating radius values for g2/3? Tab or autocomplete menu through 4 options?
- Highlight bad code (default style is RED and everything else is normal?)
- real time line evaluation

Done:
1. Move everything to lein-cljsbuild
2. Do the page layout in view.clj or whatever
5. Codemirror mode for ngc
7. Writing messages to our little console thing

Copyright (C) 2010 Jeff Sapp
