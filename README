# gsim

# how to start this:
lein ring server-headless 3000
lein cljsbuild auto [dev|prod]
/usr/local/bin/cljs-repl 

# run tests like this:
lein test

Before Launch:
1. Simple console logging
3. More gcodes (wrap this in a protocol)
4. Error handling in editor
5. Simple website wrapper

Stuff to do next:
1. Clean up interaction between the editor and draw. 
2. More tests.
5. Sending messages back to the server about errors.
6. Sending file saves back to the server.
8. Better ngc mode, and custom css for error words.

Stuff to think about:
- Have line color based on feed rates and cutting speeds. 
- Have lines color "cool off" as more lines are drawn and time goes by
- Hover over commands, highlight result. Hover over lines, highlight commands. 
- Handle \r \r\n badness correctly. 
- Storing files
- User accounts
- Uploading new files
- Managing files
- Maybe using git?
- How do we want to evaluate the code -
 * On change?
 * On run (switching to read-only)?

Wait On:
1. Put a big title bar at the top for navigating back to other pages
2. Put some kind of step forward, play, step backward, reset thing at the top of the text area

Bigger ideas to think about:
- support newer gcodes on older machines by compiling them into supported gcodes. (!)
- Cam software
- Awesome editor
- Objects, and actually simulating cuts
- language to gcode
- text / images / dxf / circuits to gcode
- storing files 

Codemirror specific stuff: 
- if you delete the current line, you lose the highlighter
- Tab completion?
- Show remaining possible arguments for existing commands 
- automatically calculating radius values for g2/3? Tab or autocomplete menu through 4 options?
- Highlight bad code (default style is RED and everything else is normal?)
- real time line evaluation

Done:
1. Move everything to lein-cljsbuild
2. Do the page layout in view.clj or whatever
5. Codemirror mode for ngc
7. Writing messages to our little console thing
3. Finish the line drawing functions
4. Hook up evaluation stuff to codemirror 
1. Testing stuff.
1. File storage. Git, Mongo, Couch, Redis?
1. Logging
2. Authentication

Copyright (C) 2010 Jeff Sapp
